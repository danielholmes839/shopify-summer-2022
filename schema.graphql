scalar DateTime # YYYY-MM-DDTHH:MM:SSZ

type Item {
    id: ID!
    product: String!        
    cost: Float!            # unit cost of the inventory is indepedent of cost 
    stock: Int!             # units available
    collection: String

    createdAt: DateTime!
    updatedAt: DateTime!
}

# output for item mutations
type ItemPayload {
    error: String
    item: Item
}

# input for item mutations
input ItemInput {
    product: String!
    cost: Float!
    stock: Int!
    collection: String
}

type Mutation {
    # item create operation
    itemCreate(input: ItemInput!): ItemPayload!

    # item update operation
    itemUpdate(id: ID!, input: ItemInput!): ItemPayload!

    # item update collection
    itemUpdateCollection(id: ID!, collection: String): ItemPayload!

    # item update stock (increase or decrease)
    itemUpdateStock(id: ID!, change: Int!): ItemPayload!

    # item delete operation
    itemDelete(id: ID!): ItemPayload!
}

type Query {
    # item get by id
    item(id: ID!): Item

    # item get all. #TODO add pagination options 
    items: [Item!]!

    # item get all by collection
    itemsByCollection(collection: String): [Item!]!
}
