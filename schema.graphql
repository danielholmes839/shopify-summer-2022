type Item {
    id: ID!
    name: String!
    price: Float!
    stock: Int!
    collection: String
}

# output for item mutations
type ItemPayload {
    error: String
    item: Item
}

# input for item mutations
input ItemInput {
    name: String!
    price: Float!
    stock: Int!
    collection: String
}

type Mutation {
    # item create operation
    itemCreate(input: ItemInput!): ItemPayload!

    # item update operation
    itemUpdate(id: ID!, input: ItemInput!): ItemPayload!

    # item update collection
    itemUpdateCollection(id: ID!, collection: String): ItemPayload!

    # item update collection operation
    itemUpdateStock(id: ID!, diff: Int!): ItemPayload!

    # item delete operation
    itemDelete(id: ID!): ItemPayload!
}

type Query {
    # item get by id
    item(id: ID!): Item

    # item get all. #TODO add pagination options 
    items: [Item!]!

    # item get all by collection
    itemsByCollection(collection: String): [Item!]!
}
